packer {
  required_plugins {
    proxmox = {
      version = ">= 1.1.2"
      source  = "github.com/hashicorp/proxmox"
    }
  }
}
  locals {
    timestamp_date = "${formatdate("YYMMDD",timestamp())}"
    timestamp_time = "${formatdate("hhmmss",timestamp())}"
    template_name  = "${formatdate("YYMMDD",timestamp())}${formatdate("hhmmss",timestamp())}-pfsense"
  }



  variable "pfsense_image" {
  type    = string
  default = "pfSense-CE-2.7.0-RELEASE-amd64.iso"
}
variable "pfsense_version" {
  type    = string
  default = "CE-2.7.0-RELEASE-amd64"
}


variable "proxmox_iso_pool" {
  type    = string
  default = "local:iso"
}

variable "proxmox_node" {
  type    = string
  default = "pve"
}

variable "proxmox_storage_format" {
  type    = string
  default = "raw"
}

variable "proxmox_storage_pool" {
  type    = string
  default = "local-zfs"
}

variable "proxmox_storage_pool_type" {
  type    = string
  default = "LVM-Thin"
}

variable "proxmox_url" {
  type    = string
}

variable "proxmox_username" {
  type    = string
}
variable "proxmox_token" {
  type = string
}

variable "proxmox_password" {
  type = string
  default = ""
}


source "proxmox-iso" "autogenerated" {
  # ID
  template_name = "${local.template_name}"
  template_description = "pfSense firewall for home lab network"
  # Proxmox Access configuration
  proxmox_url = "${var.proxmox_url}"
  username = "${var.proxmox_username}"
  password = "${var.proxmox_password}"
  token    = "${var.proxmox_token}"
  node = "${var.proxmox_node}"
  insecure_skip_tls_verify = true
  # Base ISO File configuration
  iso_file = "${var.proxmox_iso_pool}/${var.pfsense_image}"
  iso_storage_pool = "${var.proxmox_iso_pool}"
  # System
  memory = 2048
  vm_id  = 3000
  cores = 2
  sockets = 1
  cpu_type = "host"
  os = "l26"

  # Storage
  disks {
    disk_size         = "16G"
    format            = "${var.proxmox_storage_format}"
    storage_pool      = "${var.proxmox_storage_pool}"
    storage_pool_type = "${var.proxmox_storage_pool_type}"
    type              = "scsi"
  }

  # Network
  network_adapters {
    model = "virtio"
    bridge = "vmbr0"
    #vlan_tag = "10"
    #firewall = true
  }


  # Remove installation media
  unmount_iso = true
  # Start this on system boot
  onboot = true
  # Boot commands
  boot_wait = "2m"
  boot_command = [
    # Accept copyright
    "<enter><wait2s>",
    # Options: Install, Rescue Shell, Recover config.xml
    # Press enter to install
    "<enter><wait2s>",
    # Select keyboard layout, default US
    "<enter><wait2s>",
    # Options: Auto (UFS) Bios, Auto (UFS) UEFI, Manual, Shell, Auto (ZFS)
    # Enter for Auto UFS Bios
    "<enter><wait6m>",
    # Manual Configuration menu
    # Default No, Left for Yes
    "<left><wait><enter><wait10s>",
    # Dropped to shell...
    #"echo 'Port 22' >> /etc/ssh/sshd_config"
    #"echo 'ListenAddress 0.0.0.0 >> /etc/ssh/sshd_config'"
    # Allow password auth
    #"echo 'PasswordAuthentication yes' >> /etc/ssh/sshd_config",
    #"<enter><wait>",
    # Enable sshd on reboot
    #"echo 'sshd_enable=\"YES\"' >> /etc/rc.conf",
    #"<enter><wait>",
    # Create a user for ourselves
    #"pw user add -n packer -c 'Packer'  -G wheel -s /usr/local/bin/bash",
    #"<enter><wait>",
    #"passwd packer",
    #"<enter><wait>",
    #"testing"
    #"<enter><wait>",
    #"testing",
    #"<enter><wait>",
    "reboot",
    #"<enter><wait2m>",
    #Chain the rest or it fails to get through due to reboot...
    # Enter to reboot
    # n to setting up vlan tags
    # vtnet0 for WAN interface name
    # blank for LAN interface
    # y to confirm and start configuration
    # 14 -> y to enable sshd
    "<enter><wait3m>n<enter><wait1s>vtnet0<enter><wait1s><enter><wait1s>y<enter><wait2m>14<enter><wait>y<enter><wait>"
  ]
  # We don't need to do anything further in packer for now
  # If we did, we would have to install qemu utils to discover IP & configure ssh communicator
  communicator = "none"
}
build {
  // Load iso configuration
  sources = ["source.proxmox-iso.autogenerated"]
}